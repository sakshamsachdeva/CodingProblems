/*Given two linked lists of size N and M, which are sorted in non-decreasing order. The task is to merge them in such a way that the resulting list is in decreasing order.

Input:
First line of input contains number of testcases T. For each testcase, first line of input conatains length of both linked lists N and M respectively. Next two lines contains N and M elements of two linked lists.

Output:
For each testcase, print the merged linked list which is in non-increasing order.

User Task:
The task is to complete the function mergeResult() which takes reference to the heads of both linked list and returns the pointer to the merged linked list.

Constraints:
1 <=T<= 50
1 <= N, M <= 1000

Example:
Input:
2
4 3
5 10 15 40 
2 3 20
2 2
1 1
2 4

Output:
40 20 15 10 5 3 2
4 2 1 1 */


class GfG
{
    Node mergeResult(Node node1, Node node2)
    {
	   ArrayList<Integer> a = new ArrayList<Integer>();
	   while(node1!=null&&node2!=null){
	       if(node1.data<=node2.data){
	           a.add(node1.data);
	           node1=node1.next;
	       }
	       else{
	           a.add(node2.data);
	           node2=node2.next;
	       }
	   }
	   
	   while(node1!=null){
	       a.add(node1.data);
	       node1=node1.next;
	   }
	   while(node2!=null){
	       a.add(node2.data);
	       node2=node2.next;
	   }
	       
	       
	       Collections.reverse(a);
	       Node result=new Node(-1);
	       Node head=result;
	       for(int i=0;i<a.size();i++)
	       {
	           head.next= new Node(a.get(i));
	           head=head.next;
	       }
	       return result.next;  
	   }
}
